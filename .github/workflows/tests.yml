name: Tests

on:
  workflow_dispatch:

  push:
    branches:
      - "master"
      - "devel"
      - "main"
    paths:
      - "**.py"
      - "**.yaml"
      - "**.yml"
      - "**.toml"
      - "**/data/**"
      - ".github/constraints.txt"
  pull_request:
    branches:
      - "master"
      - "devel"
      - "main"
    paths:
      - "**.py"
      - "**.yaml"
      - "**.yml"
      - "**.toml"

permissions:
  contents: read  # Minimal required permissions

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/master' || github.sha }}
  cancel-in-progress: true

env:
  DEFAULT_PYTHON: "3.13"
  UV_LINK_MODE: "copy"

jobs:

  lint:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip_ci]')
    steps:
      - name: ✅ Check out the repository
        uses: actions/checkout@v4

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          enable-cache: true
          cache-dependency-glob: |
            **/uv.lock
            **/pyproject.toml      
      
      - name: Run pre commit checks
        run: |
          uv run --no-dev --group pre-commit pre-commit run -a

  
  typing:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip_ci]')
    steps:
      - name: ✅ Check out the repository
        uses: actions/checkout@v4

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          enable-cache: true
          cache-dependency-glob: |
            **/uv.lock
            **/pyproject.toml      

      - name: 🐍 Install the project
        run: |
          uv sync --all-extras --no-dev --group mypy
          uv pip list

      - name: 📦 Run mypy static type checks
        run: |
          uv run mypy src docs/source/conf.py


  docs:
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          enable-cache: true
          cache-dependency-glob: |
            **/uv.lock
            **/pyproject.toml      

      - name: 🐍 Install the project
        run: |
          uv sync --all-extras --no-dev --group docs
          uv pip list

      - name: 📦 Build documentation
        run: |
          uv run sphinx-build docs/source docs/build

  tests:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    needs: [lint, typing, docs]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.11', '3.12', '3.13' ]
        include: 
          - os: windows-latest
            python-version: '3.13'  # Windows runner is too slow

    steps:

      - name: ✅ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: |
            **/uv.lock
            **/pyproject.toml      

      - name: 🐍 Install the project
        run: uv sync --all-extras --no-dev --group test

      - name: ✅ Run tests
        run: uv run coverage run --parallel -m pytest -vv --emoji

      - name: 🔃 Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ runner.os }}-${{ matrix.python-version }}
          path: ".coverage.*"
          include-hidden-files: true
          if-no-files-found: error

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:

      - name: ✅ Check out the repository
        uses: actions/checkout@v4

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          enable-cache: true
          cache-dependency-glob: |
            **/uv.lock
            **/pyproject.toml      

      - name: 🔃 Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: 📦 Combine coverage data and display human readable report
        run: |
          uv run --no-dev --group coverage coverage combine
          uv run --no-dev --group coverage coverage report

      - name: 📦 Create coverage report
        run: |
          uv run --no-dev --group coverage coverage xml

      - name: 📤 Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
