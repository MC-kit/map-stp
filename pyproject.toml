[build-system]
requires = ["poetry-core >= 2.1.2, <3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "mapstp"
dynamic = ["version", "classifiers", "requires-python"]
description = "Transfers meta information from STP to MCNP"
license = { text = "MIT" }
readme = "README.rst"
authors = [
    { name = "dvp2015", email = "dmitri_portnov@yahoo.com" }
]
keywords = ["STP", "MCNP", "SuperMC", "SpaceClaim"]
dependencies = [
    "click (>=8.1.7)",
    "loguru (>=0.7.2)",
    "numpy (>=2.1.3)",
    "openpyxl (>=3.0.9)",
    "pandas (>=2.0.0)",
]

[project.urls]
homepage = "https://github.com/MC-kit/map-stp"
repository = "https://github.com/MC-kit/map-stp"
# documentation = "https://mapstp.readthedocs.io

[project.scripts]
mapstp = "mapstp.cli.runner:mapstp"

[tool.poetry]
version = "1.0.2a0"
packages = [{ include = "mapstp", from = "src" }]
include = [
    { path = "noxfile.py", format = "sdist" },
    { path = "tests", format = "sdist" },
    { path = "docs", format = "sdist" },
]
exclude = [
    { path = "docs/build" }
]
# Select from PyPI trove classifiers: https://pypi.org/classifiers/
# about dynamic classifiers in poetry: https://python-poetry.org/docs/pyproject/#classifiers-1
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Physics",
]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
nox = ">=2022.1.7"
tomli = { version = ">=2.0.1", python = "<3.11" }

[tool.poetry.group.pre_commit]
optional = true

[tool.poetry.group.pre_commit.dependencies]
pre-commit = ">=2.15.0"
pydocstringformatter = ">=0.7.3"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = ">=7.1"
pytest-cov = ">=4.0"
pytest-mock = ">=3.14.0"
# pytest-randomly = ">=3.12"
coverage = { version = ">=6.1.2", extras = ["toml"] }
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
pytest-durations = ">=1.5.2"


[tool.poetry.group.coverage]
optional = true

[tool.poetry.group.coverage.dependencies]
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.xdoctest]
optional = true

[tool.poetry.group.xdoctest.dependencies]
xdoctest = { extras = ["colors"], version = ">=0.15.10" }

[tool.poetry.group.typeguard]
optional = true

[tool.poetry.group.typeguard.dependencies]
typeguard = ">=4.1.5"

[tool.poetry.group.mypy.dependencies]
mypy = ">=1.2.0"
pep8-naming = ">=0.12.1"
types-setuptools = ">=57.4.2"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = ">=6.1.3"
sphinx-autodoc-typehints = ">=1.19.5"
sphinx-click = ">=4.4.0"

[tool.poetry.group.docs_auto]
optional = true

[tool.poetry.group.docs_auto.dependencies]
sphinx-autobuild = ">=2021.3.14"

[tool.poetry.group.ruff.dependencies]
ruff = ">=0.0.259"

[tool.pytest.ini_options]
minversion = "6.2"
cache_dir = '.cache/pytest'
norecursedirs = '''
*.egg-info
.*
build
data
dist
docs/_build
docs/examples
htmlcov
notebooks
tools
wrk
'''
python_functions = "test_*  profile_*"
addopts = '''
-ra
-q
--tb=short
--doctest-modules
--strict-markers
--ignore setup.py
--failed-first
--xdoctest
--pytest-durations-min=1
--pytest-resultlog="pytest-result.log"
'''
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES NUMBER"
testpaths = ["tests", "src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
# xfail tests that pass should fail the test suite
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:Implementing implicit namespace packages \(as specified in PEP 420\) is preferred to `pkg_resources.declare_namespace`',
    "ignore:.*not typechecking multipledispatch.dispatcher.*UserWarning",
    'ignore:.*io.FileIO \[closed\]',
    'ignore:.*Deprecated call to `pkg_resources.declare_namespace',
    'ignore:.*Implicit None on return values:DeprecationWarning',
    # pandas 2.1.4 at python 3.12
    'ignore:.*datetime.datetime.utcfromtimestamp\(\) is deprecated:DeprecationWarning',
    # openpyxl 3.1.2 qt python 3.12
    'ignore:.*datetime.datetime.utcnow\(\):DeprecationWarning'
]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.xdoctest]
quiet = true
options = ""

[tool.coverage.paths]
source = ["src", ".nox/*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["*_tab.py", "**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 85   # TODO dvp: restore tests for STP parsing code or remove it at all
omit = ["*_tab.py", "**/__init__.py"]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
sort = "Cover"


# MyPy config
# See https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
#     https://dev.to/tusharsadhwani/the-comprehensive-guide-to-mypy-561m
[tool.mypy]
python_version = "3.12"
strict = true
follow_imports = "silent"
disallow_untyped_defs = true
files = "src/**/*.py"
exclude = '''(?x)(
    data/.*\.py$     # python files given as data (for SpaceClaim)
  | cli/runner\.py$  # mypy doesn't like decorators
  )'''

[[tool.mypy.overrides]]
module = [
    "IPython.core.magic",
    "IPython.core.magic_arguments",
    "click",
    "click.testing",
    "loguru",
    "multipledispatch",
    "nox",
    "numpy",
    "numpy.testing",
    "pandas",
    "polars",
    "pytest",
    "scipy.constants",
    "scipy.sparse",
    "tomli",
    "tomllib",
    "xdoctest",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tomllib",
    "tomli",
]
allow_redefinition = true
disable_error_code = "no-redef"

[tool.check-manifest]
ignore = [
    "tests/*",
    "tools/*",
    "*.yaml",
    "noxfile.py",
]

[tool.jupytext]
# https://jupytext.readthedocs.io/en/latest/config.html
# Pair ipynb notebooks to py:percent text notebooks
formats = "ipynb,py:percent"

[tool.creosote]
paths = ["src"]
deps-file = "pyproject.toml"
sections = ["project.dependencies"]
exclude-deps = [
    "openpyxl",
]
