[tool.poetry]
name = "mapstp"
version = "0.3.8"
description = "Transfers meta information from STP to MCNP"
authors = ["dvp <dmitri_portnov@yahoo.com>"]
homepage = "https://github.com/MC-kit/map-stp"
repository = "https://github.com/MC-kit/map-stp"
# documentation = "https://mapstp.readthedocs.io
license = "MIT"
keywords = ["STP", "MCNP", "SuperMC", "SpaceClaim"]
readme = "README.rst"
packages = [
    { include = "mapstp", from = "src" },
]
# Select from PyPI classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Physics",
]

[tool.poetry.scripts]
mapstp = "mapstp.cli.runner:mapstp"

[tool.poetry.urls]
documentation = "https://mapstp.readthedocs.io"
Chnagelog = "https://github.com/MC-kit/mapstp/releases"


[tool.poetry.dependencies]
python = ">=3.8,<4.0"
click = ">=8.0.4"
loguru = ">=0.6.0"
numpy = ">=1.23.2"
openpyxl = ">=3.0.9"
pandas = ">=1.4.1"
tomli = ">=2.0.1"

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
nox = ">=2022.1.7"
tomli = ">=2.0.1"

#[tool.poetry.group.profile]
#optional = true

#[tool.poetry.group.profile.dependencies]
# TODO dvp: apply yappi: https://coderzcolumn.com/tutorials/python/yappi-yet-another-python-profiler
#yappi = ">=1.3.2"

[tool.poetry.group.safety.dependencies]
safety = ">=1.10.3"

[tool.poetry.group.pre_commit.dependencies]
pre-commit = ">=2.15.0"
rstcheck = ">=3.3.1"

[tool.poetry.group.black.dependencies]
black = ">=22.8.0"

[tool.poetry.group.isort.dependencies]
isort = ">=5.9.3"
pycln = {version = "^2.1.1", extras = ["click"]}

[tool.poetry.group.test.dependencies]
pytest = ">=7.0.1"
pytest-cache = ">=1.0"
pytest-cov = ">=3.0.0"
pytest-mock = ">=3.6.1"
#codecov = ">=2.1.12"
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.coverage.dependencies]
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.xdoctest.dependencies]
xdoctest = {extras = ["colors"], version = ">=0.15.10"}

[tool.poetry.group.typeguard.dependencies]
typeguard = ">=2.13.0"

[tool.poetry.group.mypy.dependencies]
mypy = ">=0.931"
pep8-naming = ">=0.12.1"
types-setuptools = ">=57.4.2"
numpy = ">=1.23.2"

[tool.poetry.group.flake8.dependencies]
darglint = ">=1.8.1"
flake8 = ">=4.0.1"
flake8-annotations = ">=2.6.2"
flake8-bandit = ">=4.1.1"
flake8-bugbear = ">=22.1.11"
flake8-builtins = ">=1.5.3"
flake8-colors = ">=0.1.9"
flake8-commas = ">=2.1.0"
flake8-comprehensions = ">=3.10.0"
flake8-docstrings = ">=1.6.0"
flake8-import-order = ">=0.18.1"
flake8-print = ">=5.0.0"
flake8-rst-docstrings = ">=0.2.3"
flake8-use-fstring = ">=1.4"
tryceratops = ">=1.0.1"

[tool.poetry.group.docs.dependencies]
sphinx = ">=5.0.2"
sphinx-autodoc-typehints = ">=1.12.0"
sphinx-autorun = ">=1.1.1"
sphinx-click = ">=4.0.3"
sphinx-rtd-theme = ">=1.0.0"
sphinxcontrib-napoleon = ">=0.7"

[tool.poetry.group.docs_auto.dependencies]
sphinx-autobuild = ">=2021.3.14"


[build-system]
requires = ["poetry-core>=1.1.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
atomic = true
ensure_newline_before_comments = true
known_first_party = "mapstp"
known_typing = "typing,types,typing_extensions,mypy,mypy_extensions"
sections = "FUTURE,TYPING,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
default_section = "FIRSTPARTY"
use_parentheses = true
multi_line_output = 3
line_length = 88
include_trailing_comma = true
lines_between_types = 1
skip = ["setup-generated.py"]
skip_glob = ["*-example.py"]


# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.

[tool.black]
line-length = 88
include = '''
(
    \.pyi?$
)
'''
exclude = '''
(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.nox
  | \.venv
  | \.idea
  | _build
  | build
  | build_configs
  | dist
  | data
  | htmlcov
  | .egg-info
  | notebooks
  | wrk
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
norecursedirs = ".* build dist *.egg-info data"
python_functions = "test_*  profile_*"
addopts = "-ra -q --tb=short --doctest-modules --strict-markers --ignore setup.py --failed-first"
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES"
testpaths = ["src/tests"]
markers = [
    "slow: too slow tests"
]
# xfail tests that pass should fail the test suite
xfail_strict = true

# [tool.coverage]
[tool.coverage.paths]
source = ["src", ".nox/*/site-packages"]

[tool.coverage.run]
branch = true
source = ["mapstp"]

[tool.coverage.report]
show_missing = true
skip_covered = true
# fail_under = 100
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]
ignore_errors = true
sort = "Cover"


# MyPy config
# See https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
python_version = "3.10"
# strict = true     # TODO dvp: uncomment this to get strict control
follow_imports = "silent"
# namespace_packages = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
show_error_context = true
error_summary = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
files = "src/mapstp/**/*.py"


[[tool.mypy.overrides]]
module = [
    "click",
    "click.testing",
    "loguru",
    "multipledispatch",
    "nox",
    "numpy.testing",
    "pandas",
    "pytest",
    "scipy.constants",
]
ignore_missing_imports = true


[tool.tryceratops]
include = ["src"]
#ignore = ["TC002", "TC200", "TC300"]
experimental = true

[tool.pycln]
path = ["src", "tools"]
#silence = true
