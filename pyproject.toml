[tool.poetry]
name = "mapstp"
version = "0.2.0"
description = "Identifies cells in an MCNP file with corresponding component pathes in original STP files"
authors = ["dvp <dmitri_portnov@yahoo.com>"]
homepage = "https://github.com/MC-kit/map-stp"
repository = "https://github.com/MC-kit/map-stp"
license = "MIT"
keywords = ["STP", "MCNP", "SuperMC"]
readme = "README.rst"
packages = [
    { include = "mapstp", from = "src" },
]
# Select from PyPI classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Physics",
]

[tool.poetry.scripts]
mapstp = "mapstp.cli.mapstp:mapstp"

[tool.poetry.dependencies]
python = "3.9"
tomli = "^1.2.1"
click = "^8.0.1"
click-loguru = "^1.3.7"
pandas = "^1.3.4"
openpyxl = "^3.0.9"

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
pytest-cache = "^1.0"
pytest-cov = "^2.12.1"
coverage = { version = "^5.5", extras = ["toml"] }
nox = "^2021.6.12"
Pygments = "^2.10.0"
black = "^21.8b0"
codecov = "^2.1.12"
darglint = "^1.8.0"
flake8 = "^3.9.2"
flake8-annotations = "^2.6.2"
flake8-bandit = "^2.1.2"
flake8-bugbear = "^21.4.3"
flake8-docstrings = "^1.6.0"
flake8-import-order = "^0.18.1"
mypy = "^0.910"
pre-commit = "^2.14.1"
pytest-benchmark = "^3.4.1"
pytest-mock = "^3.6.1"
safety = "^1.10.3"
sphinx-autodoc-typehints = "^1.12.0"
sphinx-autorun = "^1.1.1"
sphinx-rtd-theme = "^0.5.2"
sphinxcontrib-napoleon = "^0.7"
xdoctest = "^0.15.6"
rstcheck = "^3.3.1"
isort = "^5.9.3"
yappi = "^1.3.2"

[build-system]
requires = ["poetry-core>=1.0.0", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
atomic = true
ensure_newline_before_comments = true
known_first_party = "map_stp"
known_typing = "typing,types,typing_extensions,mypy,mypy_extensions"
sections = "FUTURE,TYPING,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
default_section = "FIRSTPARTY"
use_parentheses = true
multi_line_output = 3
line_length = 88
include_trailing_comma = true
lines_between_types = 1
skip = ["setup-generated.py"]
skip_glob = ["*-example.py"]


# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.

[tool.black]
line-length = 88
include = '''
(
    \.pyi?$
)
'''
exclude = '''
(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.nox
  | \.venv
  | \.idea
  | _build
  | build
  | build_configs
  | dist
  | data
  | htmlcov
  | .egg-info
  | notebooks
  | wrk
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
norecursedirs = ".* build dist *.egg-info data"
python_functions = "test_*  profile_*"
addopts = "-ra -q --tb=short --doctest-modules --strict-markers --ignore setup.py --failed-first"
# coverage doesn't allow to work with PyCharm debugger, run run-coverage script to update coverage
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES"
testpaths = ["tests"]
markers = [
    "slow: too slow tests"
]
# xfail tests that pass should fail the test suite
xfail_strict = true


[tool.coverage]

[tool.coverage.run]
source = ["mapstp"]
# omit =    *_tab.py
branch = true

[tool.coverage.report]

# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]
ignore_errors = true
sort = "Cover"


# MyPy config
# See https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
python_version = 3.9
follow_imports = "skip"
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
error_summary = true
warn_redundant_casts = true
warn_unused_ignores = true

# Needed because of bug in MyPy
disallow_subclassing_any = false

# mypy_path = mckit
files = "src/mapstp/**/*.py"


[[tool.mypy.overrides]]
module = [
    "nox.*",
]
ignore_missing_imports = true
