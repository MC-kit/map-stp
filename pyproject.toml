[tool.poetry]
name = "mapstp"
version = "0.3.11"
description = "Transfers meta information from STP to MCNP"
authors = ["dvp <dmitri_portnov@yahoo.com>"]
license = "MIT"
homepage = "https://github.com/MC-kit/map-stp"
repository = "https://github.com/MC-kit/map-stp"
# documentation = "https://mapstp.readthedocs.io
keywords = ["STP", "MCNP", "SuperMC", "SpaceClaim"]
readme = "README.rst"
packages = [
    { include = "mapstp", from = "src" },
]
# Select from PyPI classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Physics",
]

[build-system]
requires = ["poetry-core >= 1.5.2"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
mapstp = "mapstp.cli.runner:mapstp"

[tool.poetry.urls]
documentation = "https://mapstp.readthedocs.io"
Chnagelog = "https://github.com/MC-kit/mapstp/releases"


[tool.poetry.dependencies]
python = ">=3.9,<4.0"
click = ">=8.0.4"
importlib-resources = {version = ">=5.12.0", python = "3.8"}
loguru = ">=0.6.0"
numpy = ">=1.24.2"
openpyxl = ">=3.0.9"
pandas = ">=2.0.0"

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
nox = ">=2022.1.7"
tomli = { version = ">=2.0.1", python="<3.11" }

#[tool.poetry.group.profile]
#optional = true

#[tool.poetry.group.profile.dependencies]
# TODO dvp: apply yappi: https://coderzcolumn.com/tutorials/python/yappi-yet-another-python-profiler
#yappi = ">=1.3.2"

[tool.poetry.group.pre_commit.dependencies]
pre-commit = ">=2.15.0"
rstcheck = ">=3.3.1"
pydocstringformatter = ">=0.7.3"

[tool.poetry.group.black.dependencies]
black = ">=22.8.0"

[tool.poetry.group.isort.dependencies]
isort = ">=5.9.3"

[tool.poetry.group.test.dependencies]
pytest = ">=7.1"
# pytest-cache = ">=1.0"
pytest-cov = ">=4.0"
# pytest-mock = ">=3.9"
# pytest-randomly = ">=3.12"
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.coverage.dependencies]
coverage = { version = ">=6.1.2", extras = ["toml"] }

[tool.poetry.group.xdoctest.dependencies]
xdoctest = {extras = ["colors"], version = ">=0.15.10"}

[tool.poetry.group.typeguard.dependencies]
typeguard = ">=2.13.3"
# typeguard = ">=3.0.2"  - pygls, which is required by ruff-lsp, doesn't allow newer version

[tool.poetry.group.mypy.dependencies]
mypy = ">=1.2.0"
pep8-naming = ">=0.12.1"
types-setuptools = ">=57.4.2"
numpy = ">=1.23.2"

[tool.poetry.group.flake8.dependencies]
darglint = ">=1.8.1"
flake8 = ">=6.0.0"
#flake8 = ">=6.0.0"
flake8-adjustable-complexity = ">=0.0.6"
flake8-annotations = ">=2.6.2"
flake8-annotations-coverage = ">=0.0.6"
flake8-bandit = ">=4.1.1"
flake8-bugbear = ">=23.3.23"
flake8-builtins = ">=1.5.3"
flake8-class-attributes-order = ">=0.1.3"
flake8-cognitive-complexity = ">=0.1.0"
flake8-colors = ">=0.1.9"
flake8-commas = ">=2.1.0"
flake8-comprehensions = ">=3.10.0"
flake8-docstrings = ">=1.6.0"
# flake8-eradicate = ">=1.4.0"  #TODO dvp: return with  flake8-eradicate update
flake8-expression-complexity = ">=0.0.11"
flake8-functions = ">=0.0.7"
flake8-import-order = ">=0.18.1"
flake8-pie = ">=0.16.0"
flake8-print = ">=5.0.0"
flake8-rst-docstrings = ">=0.2.7"
flake8-scream = ">=0.1.0"
flake8-simplify = ">=0.19.3"
flake8-use-fstring = ">=1.4"
flake8-use-pathlib = ">=0.3.0"
pylint = ">=2.15.10"
flake8-pylint = ">=0.1.3"
# TODO dvp: check/use flake8-pyprojecttoml plugin
# https://gitlab.com/durko/flake8-pyprojecttoml/-/blob/master/pyproject.toml

[tool.poetry.group.docs.dependencies]
sphinx = ">=6.1.3"
sphinx-autodoc-typehints = ">=1.19.5"
sphinx-click = ">=4.4.0"

[tool.poetry.group.docs_auto.dependencies]
sphinx-autobuild = ">=2021.3.14"


[tool.poetry.group.pylsp.dependencies]
pylsp-mypy = ">=0.6.6"
pyls-isort = ">=0.2.2"
python-lsp-black = ">=1.2.1"
pyls-memestra = ">=0.0.16"
pylsp-rope = ">=0.1.11"
ruff-lsp = "^0.0.24"

[tool.poetry.group.ruff.dependencies]
ruff = ">=0.0.259"

[tool.isort]
atomic = true
ensure_newline_before_comments = true
known_first_party = "src"
known_third_party = "mpl_toolkits,matplotlib,numpy,scipy"
known_typing = "typing,types,typing_extensions,mypy,mypy_extensions"
sections = "FUTURE,TYPING,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
default_section = "FIRSTPARTY"
use_parentheses = true
multi_line_output = 3
line_length = 100
include_trailing_comma = true
lines_between_types = 1
skip_gitignore = true
skip_glob = ["*-example.py"]


# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.

[tool.black]
line-length = 100
include = '''
(
    \.pyi?$
)
'''
exclude = '''
(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.nox
  | \.venv
  | \.idea
  | _build
  | build
  | build_configs
  | dist
  | 3rd-party
  | data
  | htmlcov
  | \.egg-info
  | _tab\.py$
  | notebooks
  | wrk
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
norecursedirs = ".* build dist *.egg-info data htmlcov notebooks tools wrk"
python_functions = "test_*  profile_*"
addopts = "-ra -q --tb=short --doctest-modules --strict-markers --ignore setup.py --failed-first"
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES"
testpaths = ["tests"]
markers = [
    "slow: too slow tests"
]
# xfail tests that pass should fail the test suite
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:Implementing implicit namespace packages \(as specified in PEP 420\) is preferred to `pkg_resources.declare_namespace`',
    "ignore:.*not typechecking multipledispatch.dispatcher.*UserWarning",
    'ignore:.*io.FileIO \[closed\]',
    'ignore:.*Deprecated call to `pkg_resources.declare_namespace',
    'ignore:.*Implicit None on return values:DeprecationWarning'
]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.xdoctest]
quiet = true
options = ""

# [tool.coverage]
[tool.coverage.paths]
source = ["src", ".nox/*/site-packages"]

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["*_tab.py", "**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 95
omit = ["*_tab.py", "**/__init__.py"]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
sort = "Cover"


# MyPy config
# See https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
#     https://dev.to/tusharsadhwani/the-comprehensive-guide-to-mypy-561m
[tool.mypy]
python_version = "3.11"
# strict = true     # TODO dvp: uncomment this to get strict control
follow_imports = "silent"
# namespace_packages = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
disable_error_code = ["annotation-unchecked"]
show_error_context = true
error_summary = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
files = "src/mapstp/**/*.py"
plugins = ["numpy.typing.mypy_plugin"]

[[tool.mypy.overrides]]
module = [
    "click",
    "click.testing",
    "importlib_resources",
    "loguru",
    "importlib_metadata",
    "multipledispatch",
    "nox",
    "numpy.testing",
    "pandas",
    "pytest",
    "scipy.constants",
    "tomli",
    "tomllib",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tomllib",
    "tomli",
]
allow_redefinition = true
disable_error_code = "no-redef"

[tool.check-manifest]
ignore = [
    "tests/*",
    "tools/*",
    "*.yaml",
    "noxfile.py",
]

[tool.ipdb]
# For debugging in jupyterlab and ipython
# see https://github.com/gotcha/ipdb
context=5

[tool.tryceratops]
include = ["src"]
experimental = true


[tool.pydocstringformatter]
write = true
style = "pep257"
exclude = ["tools/**","src/**/*_parser.py","src/**/*_tab.py"]
strip-whitespaces = true
max-line-length = 100
summary-quotes-same-line = true


[tool.pylint]
good-names-rgxs=["."]  # a single character variable is okay
logging-format-style="new"   # use {} in logging messages
deprecated-modules=["six"]
extension-pkg-allow-list=["duckdb"]
disable=[
    "wrong-import-order"  # this is `isort` responsibility
]


[tool.ruff]
target-version = "py38"
#see full list: https://beta.ruff.rs/docs/rules/#pyflakes-f
#or run 'ruff linter' to see a brief list
select= [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    "DJ", # flake8-django
    "D", # pydocstyle
    "DTZ", # flake8-datetimez
    "EM", # flake8-errmsg
    "ERA", # eradicate
    "E", # pycodestyle
    "EXE", # flake8-executable
    "FBT", # flake8-boolean-trap  https://adamj.eu/tech/2021/07/10/python-type-hints-how-to-avoid-the-boolean-trap
    "F", # Pyflakes
    "G", # flake8-logging-format
    "ICN", # flake8-import-conventions
    "I", # isort
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "NPY", # NumPy-specific rules
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # Pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle 2
    "YTT", # flake8-2020
]

# Ignore rules that currently fail on the codebase
ignore = [
    "ANN001", # ANN001 Missing type annotation for function argument: doesn't allow to use functools dispatching
    "ANN002", # ANN002 Missing type annotation for *drop_items: ... as above
    "ANN101", # ANN101 Missing type annotation for self in method
    "ANN102", # ANN102 Missing type annotation for cls in classmethod
    # "ANN201", # Missing return type annotation for public function `mesh2com`
    "ANN202", # ANN202 Missing return type annotation for protected function: ... dispatching
    "ANN204", # ANN204 Missing return type annotation for special method

    # "ARG001", # Unused function argument: `expected`

    "B905",   # B905 `zip()` without an explicit `strict=` parameter - ignore while support 3.8, 3.9

    # "C812",   # C812 Missing trailing comma: black compatibility
    # "C901",   # too complex - ...

    # "COM812", #  [*] Trailing comma missing

    # "D100",   # Missing docstring in public module
    # "D101",   # Missing docstring in public class
    # "D102",   # Missing docstring in public method
    # "D103",   # Missing docstring in public function
    "D105",   # D105 Missing docstring in magic method (__hash__, __eq__)
    # "D104",   # Missing docstring in public package
    # "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__
    # "D417",   # Missing argument descriptions in the docstring: `config`, `ebins`, - TODO


    # "E203",   # E203: Whitespace before ‘:'
    # "E401",  # Multiple imports on one line
    "E402",  # Module level import not at top of file
    "E501",  # Line too long (<LENGTH> > 100 characters)
    # "E701",  # Multiple statements on one line (colon)
    # "E702",  # Multiple statements on one line (semicolon)
    # "E703",  # Statement ends with an unnecessary semicolon
    # "E704",  # Multiple statements on one line (def)
    # "E711",  # Comparison to `None` should be `cond is not None`
    # "E712",  # Comparison to `<BOOL>` should be `cond is <BOOL>`
    # "E713",  # Test for membership should be `not in`
    # "E714",  # Test for object identity should be `is not`
    # "E721",  # Do not compare types, use `isinstance()`
    # "E722",  # Do not use bare `except`
    # "E731",  # Do not assign a `lambda` expression, use a `def`
    # "E741",  # Ambiguous variable name: `<VARIABLE>`
    # "E743",  # Ambiguous function name: `<FUNCTION>`

    # "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first

    # "N803",    # Argument name `R` should be lowercase
    # "N806",    # Variable `D` in function should be lowercase

    # "F401",  # `<TYPE>` imported but unused
    # "F403",  # `from <MODULE> import *` used; unable to detect undefined names
    # "F405",  # `<TYPE>` may be undefined, or defined from star imports: `<MODULE>`
    # "F523",  # `.format` call has unused arguments at position(s): <INDEX>
    # "F601",  # Dictionary key literal `'<KEY>'` repeated
    # "F811",  # Redefinition of unused `<VARIABLE>` from line <LINE>
    # "F821",  # Undefined name `VARIABLE`
    # "F823",  # Local variable `VARIABLE` referenced before assignment
    # "F841",  # Local variable `VARIABLE` is assigned to but never used

    "FBT001",  # Boolean positional arg in function definition (TODO!)
    # "FBT002",  # Boolean default value in function definition (TODO!)
    # "FBT003",  # Boolean positional value in function call

    "I001",    # import order is controlled by isort
    # "I101",
    # "I201",
    # "I202",
    # "INP001",  # File `tools/clear-prev-dist-info.py` is part of an implicit namespace package.

# ignore some questionable pandas-vet warnings
    # "PD005", # use operator instead of method
    # "PD008", # We use at() to access single values
    # "PD009", # And we use iat()

    "PLE1205", # logging-too-many-args - with use logure with '{' style of placeholders

    # "PLR0912", # Too many branches (15 > 12)
    # "PLR0913", # Too many arguments to function call (6 > 5)
    # "PLR0915", # Too many statements (65 > 50)
    "PLR2004", # magic number - don't want declare 0.0 as constant
    # "PLR5501", # Consider using `elif` instead of `else` then `if` to remove one indentation level

    "PT019",   # Fixture `_bin` without value is injected as parameter (false positive?)

    # "S101",    # Use of `assert` detected
    # "S301",    # `pickle` and modules that wrap... - TODO - use sql instead of pickle

    # "SLF001",  # Private member accessed: `_geometry_spec`

    # "TCH001",  # Move application import `mckit.utils.named` into a type-checking block

    "TRY003",  #  Avoid specifying long messages outside the exception class

    # "W503",  # Line break before binary operator: for compatibility with black settings
]

# Same as Black.
line-length = 100

# show an enumeration of all autofixed lint violations
show-fixes = true

# show source code snippets when reporting violations
show-source = true

src = ["src", "test"]

# Allow unused variables when underscore-prefixed.
# dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
dummy-variable-rgx = "^_$"
exclude = [
  "docs/source/conf.py",
  "__pycache__",
  "adhoc",
  "wrk",
  "*.egg-info",
  ".cache",
  "notebooks/dvp/*.py",
]
# Assume Python 3.10.
# target-version = "py310"

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]
"benchmarks/*" = ["S101"]
"noxfile.py" = ["ANN"]
"tests/*" = ["ANN", "D100", "D101", "D102", "D103", "D104",  "PLR2004", "S101"]
"tools/*" = ["T201", "INP001", "S603", "S607"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.isort]
known-first-party = ["src"]
known-third-party = ["mpl_toolkits", "matplotlib", "numpy", "scipy"]
required-imports = ["from __future__ import annotations"]


[tool.ruff.flake8-pytest-style]
parametrize-names-type = "csv"

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"
